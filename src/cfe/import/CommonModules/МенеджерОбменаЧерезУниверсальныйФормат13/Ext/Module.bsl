
#Область СлужебныйПрограммныйИнтерфейс

&После("ЗаполнитьПравилаОбработкиДанных")
Процедура uu_ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных)
	
	Если НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_ОперацияБух_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
	
КонецПроцедуры

&После("ЗаполнитьПравилаКонвертацииОбъектов")
Процедура uu_ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации)
	
	Если НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_ОперацияБух_Получение(ПравилаКонвертации);
	КонецЕсли;
	
КонецПроцедуры

&После("ВыполнитьПроцедуруМодуляМенеджера")
Процедура uu_ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры)
	
	Если ИмяПроцедуры = "ПКО_Документ_ОперацияБух_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОперацияБух_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияБух_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОперацияБух_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена); 
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияБух_Получение_ПослеЗагрузкиВсехДанных" Тогда 
		ПКО_Документ_ОперацияБух_Получение_ПослеЗагрузкиВсехДанных(
			Параметры.Объект);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Документ_ОперацияБух

Процедура ДобавитьПОД_Документ_ОперацияБух_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОперацияБух_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОперацияБух";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОперацияБух_Получение");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОперацияБух_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОперацияБух_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОперацияБух;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОперацияБух";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОперацияБух_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОперацияБух_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных 		= "ПКО_Документ_ОперацияБух_Получение_ПослеЗагрузкиВсехДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	ОбменДаннымиXDTOСервер.ИнициализироватьРасширениеПравилаКонвертацииОбъекта(ПравилоКонвертации, "http://v8.1c.ru/edi/edi_stnd/ED_UU/1.0");
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	
	ДобавитьПКС(СвойстваШапки, "Дата", "Дата", , , "http://v8.1c.ru/edi/edi_stnd/ED_UU/1.0");
	ДобавитьПКС(СвойстваШапки, "Содержание", "Содержание", , , "http://v8.1c.ru/edi/edi_stnd/ED_UU/1.0");
	ДобавитьПКС(СвойстваШапки, "Комментарий", "Комментарий", , , "http://v8.1c.ru/edi/edi_stnd/ED_UU/1.0");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Получение", "http://v8.1c.ru/edi/edi_stnd/ED_UU/1.0");
	ДобавитьПКС(СвойстваШапки, "СуммаОперации", "СуммаОперации", , , "http://v8.1c.ru/edi/edi_stnd/ED_UU/1.0");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "", 1, , "http://v8.1c.ru/edi/edi_stnd/ED_UU/1.0");
		
КонецПроцедуры

Процедура ПКО_Документ_ОперацияБух_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") Тогда
		
		Если ДанныеXDTO.AdditionalInfo.Свойство("Движения") Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Движения", ДанныеXDTO.AdditionalInfo.Движения); 
		КонецЕсли;
		
		Если ДанныеXDTO.AdditionalInfo.Свойство("ПометкаУдаления") Тогда
			ПолученныеДанные.ПометкаУдаления = ДанныеXDTO.AdditionalInfo.ПометкаУдаления; 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПКО_Документ_ОперацияБух_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	
	Если Не ПолученныеДанные.ДополнительныеСвойства.Свойство("Движения") Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка));
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Для Каждого Движение Из ПолученныеДанные.ДополнительныеСвойства.Движения Цикл
		
		Запись = НаборЗаписей.Добавить();
		
		Запись.Период 		   = Движение.Период;
		Запись.Организация 	   = ПолученныеДанные.Организация;
		Запись.ВалютаДт 	   = Справочники.Валюты.НайтиПоКоду(Движение.ВалютаДт);
		Запись.ПодразделениеДт = uu_ОбработкаОперацийУпрУчет.ПолучитьПодразделение(Движение.ПодразделениеДт, ПолученныеДанные.Организация); 
		Запись.СчетДт 		   = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Движение.СчетДт);
		
		Если Не ЗначениеЗаполнено(Запись.СчетДт) Тогда
			ВызватьИсключение "Не найден счет по коду " + Движение.СчетДт;
		КонецЕсли;
		
		uu_ОбработкаОперацийУпрУчет.ОбработатьСубконто(Запись.СчетДт, Запись.СубконтоДт, Движение.СубконтоДт1);
		uu_ОбработкаОперацийУпрУчет.ОбработатьСубконто(Запись.СчетДт, Запись.СубконтоДт, Движение.СубконтоДт2);
		uu_ОбработкаОперацийУпрУчет.ОбработатьСубконто(Запись.СчетДт, Запись.СубконтоДт, Движение.СубконтоДт3);
		
		Запись.КоличествоДт    = Движение.КоличествоДт; 
		Запись.ВалютнаяСуммаДт = Движение.ВалютнаяСуммаДт;
		Запись.ВалютаКт 	   = Справочники.Валюты.НайтиПоКоду(Движение.ВалютаКт);
		Запись.ПодразделениеКТ = uu_ОбработкаОперацийУпрУчет.ПолучитьПодразделение(Движение.ПодразделениеКт, ПолученныеДанные.Организация);
		Запись.СчетКт 		   = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Движение.СчетКт);
		
		Если Не ЗначениеЗаполнено(Запись.СчетКт) Тогда
			ВызватьИсключение "Не найден счет по коду " + Движение.СчетКт;
		КонецЕсли;
		
		uu_ОбработкаОперацийУпрУчет.ОбработатьСубконто(Запись.СчетКт, Запись.СубконтоКт, Движение.СубконтоКт1);
		uu_ОбработкаОперацийУпрУчет.ОбработатьСубконто(Запись.СчетКт, Запись.СубконтоКт, Движение.СубконтоКт2);
		uu_ОбработкаОперацийУпрУчет.ОбработатьСубконто(Запись.СчетКт, Запись.СубконтоКт, Движение.СубконтоКт3);
		
		Запись.КоличествоКт    = Движение.КоличествоКт; 
		Запись.ВалютнаяСуммаКт = Движение.ВалютнаяСуммаКт;
		Запись.Сумма 	   	   = Движение.Сумма;
		Запись.Содержание 	   = Движение.Содержание;
		
	КонецЦикла;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ПКО_Документ_ОперацияБух_Получение_ПослеЗагрузкиВсехДанных(Объект)
	
КонецПроцедуры

#КонецОбласти